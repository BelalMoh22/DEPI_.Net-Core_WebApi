// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Day18WizardLab.Models;

public partial class AppDBContext : DbContext
{
    public AppDBContext()
    {
    }

    public AppDBContext(DbContextOptions<AppDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<COAL> COALs { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerDemographic> CustomerDemographics { get; set; }

    public virtual DbSet<E1> E1s { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeesCase> EmployeesCases { get; set; }

    public virtual DbSet<EmployeesShortTable> EmployeesShortTables { get; set; }

    public virtual DbSet<NewEmployee> NewEmployees { get; set; }

    public virtual DbSet<NewOrderDetail> NewOrderDetails { get; set; }

    public virtual DbSet<NweOrderDetail> NweOrderDetails { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Order_Detail> Order_Details { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<Shipper> Shippers { get; set; }

    public virtual DbSet<SouqCustomer> SouqCustomers { get; set; }

    public virtual DbSet<SouqOrder> SouqOrders { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Temp1> Temp1s { get; set; }

    public virtual DbSet<Territory> Territories { get; set; }

    public virtual DbSet<emp> emps { get; set; }

    public virtual DbSet<p1> p1s { get; set; }

    public virtual DbSet<p2> p2s { get; set; }

    public virtual DbSet<t1> t1s { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=Belal-2004;Initial Catalog=Northwind;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.CustomerID).IsFixedLength();

            entity.HasMany(d => d.CustomerTypes).WithMany(p => p.Customers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerCustomerDemo",
                    r => r.HasOne<CustomerDemographic>().WithMany()
                        .HasForeignKey("CustomerTypeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerCustomerDemo"),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerCustomerDemo_Customers"),
                    j =>
                    {
                        j.HasKey("CustomerID", "CustomerTypeID").IsClustered(false);
                        j.ToTable("CustomerCustomerDemo");
                        j.IndexerProperty<string>("CustomerID")
                            .HasMaxLength(5)
                            .IsFixedLength();
                        j.IndexerProperty<string>("CustomerTypeID")
                            .HasMaxLength(10)
                            .IsFixedLength();
                    });
        });

        modelBuilder.Entity<CustomerDemographic>(entity =>
        {
            entity.HasKey(e => e.CustomerTypeID).IsClustered(false);

            entity.Property(e => e.CustomerTypeID).IsFixedLength();
        });

        modelBuilder.Entity<E1>(entity =>
        {
            entity.Property(e => e.OrderId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasOne(d => d.ReportsToNavigation).WithMany(p => p.InverseReportsToNavigation).HasConstraintName("FK_Employees_Employees");

            entity.HasMany(d => d.Territories).WithMany(p => p.Employees)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeTerritory",
                    r => r.HasOne<Territory>().WithMany()
                        .HasForeignKey("TerritoryID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmployeeTerritories_Territories"),
                    l => l.HasOne<Employee>().WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EmployeeTerritories_Employees"),
                    j =>
                    {
                        j.HasKey("EmployeeID", "TerritoryID").IsClustered(false);
                        j.ToTable("EmployeeTerritories");
                        j.IndexerProperty<string>("TerritoryID").HasMaxLength(20);
                    });
        });

        modelBuilder.Entity<EmployeesCase>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Employee__3214EC27ABA8A781");
        });

        modelBuilder.Entity<EmployeesShortTable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3214EC072E412944");
        });

        modelBuilder.Entity<NewEmployee>(entity =>
        {
            entity.Property(e => e.EmployeeID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.CustomerID).IsFixedLength();
            entity.Property(e => e.Freight)
                .HasDefaultValue(0m)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Orders_Freight");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders).HasConstraintName("FK_Orders_Customers");

            entity.HasOne(d => d.Employee).WithMany(p => p.Orders).HasConstraintName("FK_Orders_Employees");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Orders).HasConstraintName("FK_Orders_Shippers");
        });

        modelBuilder.Entity<Order_Detail>(entity =>
        {
            entity.HasKey(e => new { e.OrderID, e.ProductID }).HasName("PK_Order_Details");

            entity.Property(e => e.Discount).HasAnnotation("Relational:DefaultConstraintName", "DF_Order_Details_Discount");
            entity.Property(e => e.Quantity)
                .HasDefaultValue((short)1)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Order_Details_Quantity");
            entity.Property(e => e.UnitPrice).HasAnnotation("Relational:DefaultConstraintName", "DF_Order_Details_UnitPrice");

            entity.HasOne(d => d.Order).WithMany(p => p.Order_Details)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Details_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.Order_Details)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Details_Products");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.Discontinued).HasAnnotation("Relational:DefaultConstraintName", "DF_Products_Discontinued");
            entity.Property(e => e.ReorderLevel)
                .HasDefaultValue((short)0)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Products_ReorderLevel");
            entity.Property(e => e.UnitPrice)
                .HasDefaultValue(0m)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Products_UnitPrice");
            entity.Property(e => e.UnitsInStock)
                .HasDefaultValue((short)0)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Products_UnitsInStock");
            entity.Property(e => e.UnitsOnOrder)
                .HasDefaultValue((short)0)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_Products_UnitsOnOrder");

            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Products).HasConstraintName("FK_Products_Suppliers");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.RegionID).IsClustered(false);

            entity.Property(e => e.RegionID).ValueGeneratedNever();
            entity.Property(e => e.RegionDescription).IsFixedLength();
        });

        modelBuilder.Entity<Territory>(entity =>
        {
            entity.HasKey(e => e.TerritoryID).IsClustered(false);

            entity.Property(e => e.TerritoryDescription).IsFixedLength();

            entity.HasOne(d => d.Region).WithMany(p => p.Territories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Territories_Region");
        });

        modelBuilder.Entity<emp>(entity =>
        {
            entity.Property(e => e.EmployeeID).ValueGeneratedOnAdd();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}